CREATE OR REPLACE PACKAGE BODY etl_perf.load_classic
IS
  PROCEDURE load_bad
  IS
  BEGIN
--    EXECUTE IMMEDIATE 'TRUNCATE FACT_TAB_STAGE';
    INSERT /*+ APPEND */
    INTO FACT_TAB_BAD
      (FACT_ID, BATCH_NUMBER, TABLE_OWNER_ID, TABLE_NAME, COLUMN_NAME, DATA_TYPE_ID, BLOCKS, PARTITIONED,
       SRC_OWNER, SRC_DATA_TYPE, SRC_PARTITIONED)
      SELECT FACT_ID, BATCH_NUMBER, TABLE_OWNER_ID, TABLE_NAME, COLUMN_NAME, DATA_TYPE_ID, BLOCKS, PARTITIONED,
             SRC_OWNER, SRC_DATA_TYPE, SRC_PARTITIONED
        FROM FACT_TAB_STAGE s
      where s.IS_BAD='Y';
  END load_bad;

  PROCEDURE load_stage
  IS
    BEGIN
      EXECUTE IMMEDIATE 'TRUNCATE TABLE FACT_TAB_STAGE';
      INSERT /*+ APPEND */
      INTO FACT_TAB_STAGE
      (FACT_ID, BATCH_NUMBER, TABLE_OWNER_ID, TABLE_NAME, COLUMN_NAME, DATA_TYPE_ID, BLOCKS, PARTITIONED,
       SRC_OWNER, SRC_DATA_TYPE, SRC_PARTITIONED, IS_BAD, OPERATION_TYPE)
        SELECT FACT_ID_SEQ.nextval, BATCH_NO, o.OWNER_ID, a.TABLE_NAME, a.COLUMN_NAME, d.DATA_TYPE_ID, a.BLOCKS, DECODE(a.PARTITIONED, 'YES', 'Y', 'NO', 'N' ),
          a.OWNER, a.DATA_TYPE, a.PARTITIONED,
          CASE
          WHEN o.OWNER_ID IS NULL OR d.DATA_TYPE_ID IS NULL OR DECODE(a.PARTITIONED, 'YES', 'Y', 'NO', 'N' ) IS NULL OR a.BLOCKS IS NULL
          THEN 'Y'
          ELSE 'N'
          END,
          'I'
        FROM SRC_FACT_TAB a
          LEFT JOIN DIM_OWNER_TAB o ON o.OWNER = a.OWNER
          LEFT JOIN DIM_DATA_TYPE_TAB d ON d.DATA_TYPE = a.DATA_TYPE;
    END load_stage;

  PROCEDURE load_fact
  IS
    BEGIN
      INSERT INTO FACT_TAB
      (FACT_ID, BATCH_NUMBER, TABLE_OWNER_ID, TABLE_NAME, COLUMN_NAME, DATA_TYPE_ID, BLOCKS, PARTITIONED)
      SELECT FACT_ID, BATCH_NUMBER, TABLE_OWNER_ID, TABLE_NAME, COLUMN_NAME, DATA_TYPE_ID, BLOCKS, PARTITIONED
        FROM FACT_TAB_STAGE
          WHERE IS_BAD = 'N';
    END load_fact;

END load_classic;
/
